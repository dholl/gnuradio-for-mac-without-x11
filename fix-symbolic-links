#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:set ft=python ai ts=8 et sw=4 sts=4 nowrap:
# The above line sets vim to set tab stops at 4 columns, and fill them with spaces instead of tab characters.

"""
fix-symbolic-links - Rewrite symbolic links to be relative instead of absolute
"""

import os as _os
import stat as _stat
import subprocess as _subprocess
import sys as _sys
import base64 as _base64
import warnings as _warnings

# Module-wide assumptions:
assert len(_os.sep) == 1
assert '..'==u'..'
assert '.'==u'.'

def safe_normpath(path, remove_dotdots=True, stat_test=True):
    """
    safe_normpath - similar to os.path.normpath, but tries to be safe with symbolic links

    Specifically:
        Guarantee that lstat points to the same file.
        If remove_dotdots==True, then:
            Only collapse 'a/blah/../b' into 'a/b' when 'blah' is a directory, not a symbolic link to a directory.
            Collapse '/a/b/../../../../..' to '/' with a warning emitted.
        If path ends '.' then the output will include the ending '.'.  Otherwise, /b/./c/d/. -> /b/c/d/.
            (Because if /b/c/d is a symlink, then /b/c/d/. is the directory that it points too and not the symlink.)

        If remove_dotdots==False, then skip all lstat checks, but don't collapse any '..'
    """

    # We only deal with real paths.  They may be relative or absolute, but they
    # must refer to something that exists.  (If you want purely fictional
    # paths, then use os.path.normpath.)
    if stat_test:
        st1 = _os.lstat(path)

    path_list = path.split(_os.sep)
    assert isinstance(path_list, list)
    # Assume unix paths.
    # Remove all empty '' and '.' from the middle of the list, because these are a//b or a/./b
    if len(path_list)>2:
        path_list = path_list[:1] + filter(lambda p: p not in {'', '.'}, path_list[1:-1]) + path_list[-1:]
    #for p in path_list:
    if not remove_dotdots:
        # Don't collapse ANY '..' elements:
        new_path_list = path_list
    else:
        new_path_list = []
        # Only remove '..' elements if they refer to a real directory:
        for ndx in range(len(path_list)):
            if stat_test:
                if not _os.path.samestat(st1, _os.lstat(_os.sep.join(new_path_list+path_list[ndx:]))):
                    raise RuntimeError('Failed sanity check:  While simplifying {!r}, os.path.samestat fails for intermediate result {!r}.\n\tDebug:\n\t\tnew_path_list={!r}\n\t\tpath_list[{}:]={!r}\n\t\ttested path={!r}\n'.format(new_path_list, ndx, path_list[ndx:], _os.sep.join(new_path_list+path_list[ndx:])))

            current_name = path_list[ndx]

            if current_name!='..':
                new_path_list.append(current_name) # append the current entry from path_list
                continue

            # So current_name=='..', can we safely remove it?

            if samelfile(_os.sep.join(new_path_list), _os.sep.join(new_path_list+['..'])):
                # We must be at root /, since / == /..
                _warnings.warn('Path {!r} is trying to access up beyond /', RuntimeWarning)

            if not new_path_list:
                new_path_list.append(current_name) # append the current entry from path_list
                continue

            if new_path_list[-1] == '..':
                new_path_list.append(current_name) # append the current entry from path_list
                continue

            if new_path_list == ['']:
                # Drop the .. since /.. -> /
                continue

            if _stat.S_ISDIR(_os.lstat(_os.sep.join(new_path_list)).st_mode): # _os.path.isdir can get fooled.  I want lstat here.
                # Yep, current_name=='..' and new_path_list refers to a directory, so remove the
                # last entry on new_path_list and don't store current_name:
                del new_path_list[-1]
            else:
                new_path_list.append(current_name) # append the current entry from path_list

    new_path = _os.sep.join(new_path_list)
    if stat_test:
        if not _os.path.samestat(st1, _os.lstat(new_path)):
            raise RuntimeError('Failed sanity check:  Simplified {!r} into {!r} but os.path.samestat returns False'.format(path, new_path))
    return new_path

def norm_split_path(path):
    """
    '../..//some/.///path//' -> ['..', '..', 'some', 'path']
    '////../..//some/.///path//' -> ['', 'some', 'path']
    """
    return safe_normpath(path, remove_dotdots=False, stat_test=False).split(_os.sep)

def path_is_subpath(basepath, filepath):
    norm_basepath = norm_split_path(basepath)
    norm_filepath = norm_split_path(filepath)
    return norm_basepath==norm_filepath[:len(norm_basepath)]

def samelfile(path1, path2):
    # Like os.path.samefile but uses lstat, so I don't dereference a symlink
    # that was pointed at from another symlink.
    return _os.path.samestat(_os.lstat(path1), _os.lstat(path2))

def process_file(basepath, filepath, verbose=0):
    wrote_header = False

    if verbose>=2:
        _sys.stdout.write('{!r}\n'.format(filepath))
        wrote_header = True

    if not path_is_subpath(basepath, filepath):
        raise ValueError('filepath is not under basepath.  filepath={!r}  basepath={!r}'.format(filepath, basepath))

    if not path_is_subpath(_os.path.realpath(basepath), _os.path.realpath(filepath)):
        raise ValueError('realpath(filepath) is not under realpath(basepath).  filepath={!r}  realpath(filepath)={!r}  basepath={!r}  realpath(basepath)={!r}'.format(filepath, _os.path.realpath(filepath), basepath, _os.path.realpath(basepath)))

    # I'm not using realpath for fear that it may dereference too many symlink
    # levels, such as if a symlink points to another symlink, as may be common
    # for shared libraries.
    symlink_path = _os.readlink(filepath)
    if _os.path.isabs(symlink_path):
        abs_symlink_path = symlink_path
    else:
        abs_symlink_path = _os.sep.join([_os.path.dirname(filepath), symlink_path])
        try:
            _os.lstat(abs_symlink_path)
        except:
            # This symlink doesn't point to a file, so handle it cautiously.
            abs_symlink_path = safe_normpath(abs_symlink_path, remove_dotdots=False, stat_test=False)
        else:
            abs_symlink_path = safe_normpath(abs_symlink_path, remove_dotdots=True, stat_test=True)

    if not path_is_subpath(basepath, abs_symlink_path):
        # For now, we disallow symbolic links to point outside of basepath, but
        # we don't check too hard, in case a symbolic link traverses over otehr
        # symbolic links that would put us outside basepath.
        #
        # But maybe in the future, we might consider allowing outside-pointing
        # links, but constrained to this simple logic:
        #   if the symlink points within basepath, then it must be relative.
        #   if a symlink points outside, then it must be absolute.
        raise ValueError('symlink points outside basepath.  filepath={!r}  basepath={!r}  symlink_path={!r}  abs_symlink_path={!r}'.format(filepath, basepath, symlink_path, abs_symlink_path))
    new_symlink_path = _os.path.relpath(abs_symlink_path, _os.path.dirname(filepath))
    if symlink_path == new_symlink_path:
        if verbose>=2:
            if not wrote_header:
                _sys.stdout.write('{!r}\n'.format(filepath))
                wrote_header = True
            _sys.stdout.write('\tsymlink unchanged: {!r}\n'.format(symlink_path))
    else:
        if verbose>=1:
            if not wrote_header:
                _sys.stdout.write('{!r}\n'.format(filepath))
                wrote_header = True
            _sys.stdout.write('\tsymlink: {!r} -> {!r}\n'.format(symlink_path, new_symlink_path))

        tmp_suffix=_base64.b32encode(_os.urandom(10))
        while _os.path.lexists(filepath+tmp_suffix):
            tmp_suffix=_base64.b32encode(_os.urandom(10))

        _os.symlink(new_symlink_path, filepath+tmp_suffix)
        need_unlink_tmp = True
        try:
            if _os.path.exists(filepath):
                if not _os.path.samefile(filepath, filepath+tmp_suffix):
                    _os.unlink(filepath+tmp_suffix)
                    raise RuntimeError('Failed safety check: new link and old link did not point to the same file.  filepath={!r}  symlink_path={!r}  new_symlink_path={!r}'.format(filepath, symlink_path, abs_symlink_path))
                else:
                    if verbose>=2:
                        if not wrote_header:
                            _sys.stdout.write('{!r}\n'.format(filepath))
                            wrote_header = True
                        _sys.stdout.write('\tSuccessfully verified.\n')
            else:
                if not wrote_header:
                    _sys.stdout.write('{!r}\n'.format(filepath))
                    wrote_header = True
                _sys.stdout.write('\tThe original symlink was broken.  Rewriting anyway, but the new one will be just as broken...\n')
            # _os.unlink(filepath) is not needed since _os.rename will handle it atomically:
            _os.rename(filepath+tmp_suffix, filepath)
            need_unlink_tmp = False
        finally:
            if need_unlink_tmp:
                _os.unlink(filepath+tmp_suffix)

# walktree is based on example in https://docs.python.org/2/library/stat.html
def walktree(top_path, callback):
    # https://docs.python.org/3/library/os.html#os.scandir
    # _os.scandir from Python 3 would be better.
    for f in _os.listdir(top_path):
        pathname = _os.path.join(top_path, f)
        mode = _os.lstat(pathname).st_mode
        if _stat.S_ISLNK(mode):
            # Process all symbolic links
            callback(pathname)
            continue
        if _stat.S_ISDIR(mode):
            walktree(pathname, callback)
            continue

if __name__ == "__main__":
    if len(_sys.argv)<2:
        _sys.stderr.write('Usage: {} [-v] [-v] path\n\t-v - Increase verbose reporting level\n\t\tDefault is only print warning and errors.\n\t\tSingle -v prints changed symbolic links\n\t\tTwo -v -v also prints upon finding any symbolic link\n'.format(_sys.argv[0]))

    verbose = 0

    # Undocumented feature:  If the user happens to specify multiple paths, then we'll handle each separately:
    for basepath in _sys.argv[1:]:
        if basepath in {'-v', '--verbose'}:
            # This is a command line arg to enable verbose reporting.
            verbose += 1
            continue
        walktree(basepath, lambda filepath: process_file(basepath, filepath, verbose))
