#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:set ft=python ai ts=8 et sw=4 sts=4 nowrap:
# The above line sets vim to set tab stops at 4 columns, and fill them with spaces instead of tab characters.

"""
fix_symbolic_links - Rewrite symbolic links to be relative instead of absolute
"""

import os as _os
import stat as _stat
import sys as _sys
import base64 as _base64
from path_tools import safe_normpath, path_is_subpath, norm_split_path

# Module-wide assumptions:
assert len(_os.sep) == 1
assert '..'==u'..'
assert '.'==u'.'

def process_file(basepath, filepath, verbose=0):
    wrote_header = False

    if verbose>=2:
        _sys.stdout.write('{!r}\n'.format(filepath))
        wrote_header = True

    if not path_is_subpath(basepath, filepath):
        raise ValueError('filepath is not under basepath.  filepath={!r}  basepath={!r}'.format(filepath, basepath))

    if not path_is_subpath(_os.path.realpath(basepath), _os.path.realpath(filepath)):
        raise ValueError('realpath(filepath) is not under realpath(basepath).  filepath={!r}  realpath(filepath)={!r}  basepath={!r}  realpath(basepath)={!r}'.format(filepath, _os.path.realpath(filepath), basepath, _os.path.realpath(basepath)))

    # I'm not using realpath for fear that it may dereference too many symlink
    # levels, such as if a symlink points to another symlink, as may be common
    # for shared libraries.
    symlink_path = _os.readlink(filepath)
    if _os.path.isabs(symlink_path):
        abs_symlink_path = symlink_path
    else:
        abs_symlink_path = _os.sep.join([_os.path.dirname(filepath), symlink_path])
        try:
            _os.lstat(abs_symlink_path)
        except:
            # This symlink doesn't point to a file, so handle it cautiously.
            abs_symlink_path = safe_normpath(abs_symlink_path, remove_dotdots=False, stat_test=False)
        else:
            abs_symlink_path = safe_normpath(abs_symlink_path, remove_dotdots=True, stat_test=True)

    if not path_is_subpath(basepath, abs_symlink_path):
        # For now, we disallow symbolic links to point outside of basepath, but
        # we don't check too hard, in case a symbolic link traverses over otehr
        # symbolic links that would put us outside basepath.
        #
        # But maybe in the future, we might consider allowing outside-pointing
        # links, but constrained to this simple logic:
        #   if the symlink points within basepath, then it must be relative.
        #   if a symlink points outside, then it must be absolute.
        raise ValueError('symlink points outside basepath.  filepath={!r}  basepath={!r}  symlink_path={!r}  abs_symlink_path={!r}'.format(filepath, basepath, symlink_path, abs_symlink_path))
    new_symlink_path = _os.path.relpath(abs_symlink_path, _os.path.dirname(filepath))
    if symlink_path == new_symlink_path:
        if verbose>=2:
            if not wrote_header:
                _sys.stdout.write('{!r}\n'.format(filepath))
                wrote_header = True
            _sys.stdout.write('\tsymlink unchanged: {!r}\n'.format(symlink_path))
    else:
        if verbose>=1:
            if not wrote_header:
                _sys.stdout.write('{!r}\n'.format(filepath))
                wrote_header = True
            _sys.stdout.write('\tsymlink: {!r} -> {!r}\n'.format(symlink_path, new_symlink_path))

        tmp_suffix=_base64.b32encode(_os.urandom(10))
        while _os.path.lexists(filepath+tmp_suffix):
            tmp_suffix=_base64.b32encode(_os.urandom(10))

        _os.symlink(new_symlink_path, filepath+tmp_suffix)
        need_unlink_tmp = True
        try:
            if _os.path.exists(filepath):
                if not _os.path.samefile(filepath, filepath+tmp_suffix):
                    _os.unlink(filepath+tmp_suffix)
                    raise RuntimeError('Failed safety check: new link and old link did not point to the same file.  filepath={!r}  symlink_path={!r}  new_symlink_path={!r}'.format(filepath, symlink_path, abs_symlink_path))
                else:
                    if verbose>=2:
                        if not wrote_header:
                            _sys.stdout.write('{!r}\n'.format(filepath))
                            wrote_header = True
                        _sys.stdout.write('\tSuccessfully verified.\n')
            else:
                if not wrote_header:
                    _sys.stdout.write('{!r}\n'.format(filepath))
                    wrote_header = True
                _sys.stdout.write('\tThe original symlink was broken.  Rewriting anyway, but the new one will be just as broken...\n')
            # _os.unlink(filepath) is not needed since _os.rename will handle it atomically:
            _os.rename(filepath+tmp_suffix, filepath)
            need_unlink_tmp = False
        finally:
            if need_unlink_tmp:
                _os.unlink(filepath+tmp_suffix)

# walktree is based on example in https://docs.python.org/2/library/stat.html
def walktree(top_path, callback):
    # https://docs.python.org/3/library/os.html#os.scandir
    # _os.scandir from Python 3 would be better.
    for f in _os.listdir(top_path):
        pathname = _os.path.join(top_path, f)
        mode = _os.lstat(pathname).st_mode
        if _stat.S_ISLNK(mode):
            # Process all symbolic links
            callback(pathname)
            continue
        if _stat.S_ISDIR(mode):
            walktree(pathname, callback)
            continue

if __name__ == "__main__":
    if len(_sys.argv)<2:
        _sys.stderr.write('Usage: {} [-v] [-v] path\n\t-v - Increase verbose reporting level\n\t\tDefault is only print warning and errors.\n\t\tSingle -v prints changed symbolic links\n\t\tTwo -v -v also prints upon finding any symbolic link\n'.format(_sys.argv[0]))

    verbose = 0

    # Undocumented feature:  If the user happens to specify multiple paths, then we'll handle each separately:
    for basepath in _sys.argv[1:]:
        if basepath in {'-v', '--verbose'}:
            # This is a command line arg to enable verbose reporting.
            verbose += 1
            continue
        walktree(basepath, lambda filepath: process_file(basepath, filepath, verbose))
