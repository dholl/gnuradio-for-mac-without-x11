#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:set ft=python ai ts=8 et sw=4 sts=4 nowrap:
# The above line sets vim to set tab stops at 4 columns, and fill them with spaces instead of tab characters.

"""
fix_script_references - Rewrite #!/Applications/GNURadio.app/blah to replace with #!/usr/bin/env -S${GNURADIO_APP_DIR}/blah

Usage:
fix_script_references /Applications/GNURadio.app GNURADIO_APP_DIR /Applications/GNURadio.app/Contents/Resources
"""

import os as _os
import stat as _stat
import sys as _sys
import base64 as _base64
import shutil as _shutil
from path_tools import safe_normpath, path_is_subpath, norm_split_path

# Module-wide assumptions:
assert len(_os.sep) == 1
assert '..'==u'..'
assert '.'==u'.'

def process_file(filepath, basepath, env_var, verbose=0):
    basepath_endswith_slash = basepath.endswith(b'/')
    with open(filepath, 'rb') as script_file:
        first_bytes = script_file.read(2)
        if first_bytes!=b'#!':
            return
        header = None
        if basepath_endswith_slash:
            next_bytes = script_file.read(len(basepath))
            if next_bytes != basepath:
                return
            header = b'#!/usr/bin/env -S${{{env_var}}}'.format(env_var=env_var)
        else:
            next_bytes = script_file.read(len(basepath+b'/'))
            if next_bytes != basepath+b'/':
                return
            header = b'#!/usr/bin/env -S${{{env_var}}}/'.format(env_var=env_var)
        if verbose>=2:
            _sys.stdout.write('{!r}: {!r}... -> {!r}...\n'.format(filepath, first_bytes+next_bytes, header))
        elif verbose>=1:
            _sys.stdout.write('{!r}\n'.format(filepath))

        tmp_suffix='.fix_script_references-'+_base64.b32encode(_os.urandom(10))
        while _os.path.lexists(filepath+tmp_suffix):
            tmp_suffix='.fix_script_references-'+_base64.b32encode(_os.urandom(10))

        need_unlink_tmp = True
        try:
            with open(filepath+tmp_suffix, 'wbx') as out_file:
                out_file.write(header)
                _shutil.copyfileobj(script_file, out_file)
            _shutil.copystat(filepath, filepath+tmp_suffix)
            _os.rename(filepath+tmp_suffix, filepath)
            need_unlink_tmp = False
        finally:
            if need_unlink_tmp:
                _os.unlink(filepath+tmp_suffix)

# walktree is based on example in https://docs.python.org/2/library/stat.html
def walktree(top_path, callback):
    # https://docs.python.org/3/library/os.html#os.scandir
    # _os.scandir from Python 3 would be better.
    mode = _os.lstat(top_path).st_mode # lstat to avoid symlinks
    if _stat.S_ISREG(mode) and 0!=(mode & (_stat.S_IXUSR | _stat.S_IXGRP | _stat.S_IXOTH)):
        # Process all regular files with any execute bit set:
        callback(top_path)
    elif _stat.S_ISDIR(mode):
        for f in _os.listdir(top_path):
            pathname = _os.path.join(top_path, f)
            walktree(pathname, callback)

if __name__ == "__main__":
    verbose = 0
    while len(_sys.argv)>=2 and _sys.argv[1]=='-v':
        verbose += 1
        del _sys.argv[1]
    if len(_sys.argv)<4:
        _sys.stderr.write('Usage: {} [-v] [-v] base_path env_var dir1 dir2 ...\n\t-v - Increase verbose reporting level\n\t\tDefault is only print warning and errors.\n\t\tSingle -v prints changed files\n\t\tTwo -v -v also prints changes within each file\n'.format(_sys.argv[0]))
        _sys.exit(1)
    basepath=_sys.argv[1]
    env_var=_sys.argv[2]
    for dir_path in _sys.argv[3:]:
        walktree(dir_path, lambda filepath: process_file(filepath, basepath, env_var, verbose))
